import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedNetworksClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    createCantonValidatorInit(request: T.CreateCantonValidatorRequest): Promise<UserActionChallengeResponse>;
    createCantonValidatorComplete(request: T.CreateCantonValidatorRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateCantonValidatorResponse>;
    getFees(request?: T.GetFeesRequest): Promise<T.GetFeesResponse>;
    listCantonValidators(request: T.ListCantonValidatorsRequest): Promise<T.ListCantonValidatorsResponse>;
    readContract(request: T.ReadContractRequest): Promise<T.ReadContractResponse>;
}
