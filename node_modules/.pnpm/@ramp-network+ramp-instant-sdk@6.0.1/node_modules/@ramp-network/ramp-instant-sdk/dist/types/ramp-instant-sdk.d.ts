import { IHostConfig, TAllEvents, TOnRequestCryptoAccountCallback, TOnSendCryptoCallback } from './types';
export { type IWidgetCloseEvent as WidgetCloseEvent, type IWidgetCloseRequestCancelledEvent as WidgetCloseRequestCancelledEvent, type IWidgetCloseRequestConfirmedEvent as WidgetCloseRequestConfirmedEvent, type IWidgetCloseRequestEvent as WidgetCloseRequestEvent, type IWidgetConfigDoneEvent as WidgetConfigDoneEvent, type IWidgetEvent as RampInstantEvent, type TWidgetEvents as RampInstantEvents, WidgetEventTypes as RampInstantEventTypes, type AllWidgetVariants as RampInstantWidgetVariantTypes, type IPurchase as RampInstantPurchase, } from './types';
export declare class RampInstantSDK {
    widgetWindow?: Window;
    domNodes?: {
        body: HTMLBodyElement | null;
        iframe: HTMLIFrameElement;
        overlay: HTMLDivElement | null;
        shadowHost: HTMLDivElement;
        shadow: ShadowRoot;
        container?: HTMLDivElement;
    };
    private _config;
    private _rawNormalizedConfig;
    private _listeners;
    private _isVisible;
    private _onSendCryptoCallback;
    constructor(config: IHostConfig);
    show(): RampInstantSDK;
    on<T extends TAllEvents>(type: T['type'] | '*', callback: (event: T) => any): RampInstantSDK;
    unsubscribe(type: TAllEvents['type'] | '*', callback: (event: TAllEvents) => any): RampInstantSDK;
    _on<T extends TAllEvents>(type: T['type'] | '*', callback: (event: T) => any, internal: boolean): void;
    close(): RampInstantSDK;
    onSendCrypto(callback: TOnSendCryptoCallback): RampInstantSDK;
    onRequestCryptoAccount(callback: TOnRequestCryptoAccountCallback): RampInstantSDK;
    private _subscribeToWidgetEvents;
    private _registerSdkEventHandlers;
    private _sendEventToWidget;
    private _dispatchEvent;
    private _handleEscapeClick;
    private _onSendCrypto;
    private _teardownEventSubscriptions;
    private _removeEscapeHandler;
    private _showUsingEmbeddedMode;
    private _showUsingOverlayMode;
    private _showUsingHostedMode;
    private _isConfiguredWithOverlay;
    private _isConfiguredAsHosted;
    private _isConfiguredAsEmbedded;
    private _getHostConfigSdkParams;
    private _makeVisible;
    private _onConfigEvent;
}
