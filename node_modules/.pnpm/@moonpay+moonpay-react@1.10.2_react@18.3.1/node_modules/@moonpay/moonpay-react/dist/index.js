// src/components/MoonPayBalanceDepositWidget.tsx
import { useContext as useContext2, useMemo } from "react";

// src/constants.ts
var MOONPAY_WIDGET_CONTAINER_ID = "moonpay-react-sdk-embedded-frame";

// src/helpers.ts
var getBuyConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment,
  signature
}) => {
  const {
    // params
    currencyCode,
    defaultCurrencyCode,
    walletAddress,
    walletAddressTag,
    walletAddresses,
    walletAddressTags,
    colorCode,
    theme,
    themeId,
    language,
    baseCurrencyCode,
    baseCurrencyAmount,
    quoteCurrencyAmount,
    lockAmount,
    email,
    externalTransactionId,
    externalCustomerId,
    paymentMethod,
    redirectURL,
    showAllCurrencies,
    showOnlyCurrencies,
    showWalletAddressForm,
    unsupportedRegionRedirectUrl,
    skipUnsupportedRegionScreen,
    baseOrigin,
    // handlers
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated,
    // auth
    auth,
    useWarnBeforeRefresh,
    // other
    overlayNode
  } = props;
  const params = {
    apiKey,
    signature,
    currencyCode,
    defaultCurrencyCode,
    walletAddress,
    walletAddressTag,
    walletAddresses,
    walletAddressTags,
    colorCode,
    theme,
    themeId,
    language,
    baseCurrencyCode,
    baseCurrencyAmount,
    quoteCurrencyAmount,
    lockAmount,
    email,
    externalTransactionId,
    externalCustomerId,
    paymentMethod,
    redirectURL,
    showAllCurrencies,
    showOnlyCurrencies,
    showWalletAddressForm,
    unsupportedRegionRedirectUrl,
    skipUnsupportedRegionScreen
  };
  const handlers = {
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "buy",
    variant: props.variant,
    environment,
    params,
    debug,
    baseOrigin,
    handlers,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`,
    overlayNode
  };
};
var getSellConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment,
  signature
}) => {
  const {
    // params
    quoteCurrencyCode,
    defaultCurrencyCode,
    defaultBaseCurrencyCode,
    walletAddress,
    walletAddressTag,
    walletAddresses,
    walletAddressTags,
    colorCode,
    theme,
    themeId,
    language,
    baseCurrencyCode,
    baseCurrencyAmount,
    quoteCurrencyAmount,
    lockAmount,
    email,
    externalTransactionId,
    externalCustomerId,
    paymentMethod,
    redirectURL,
    showAllCurrencies,
    showOnlyCurrencies,
    showWalletAddressForm,
    unsupportedRegionRedirectUrl,
    skipUnsupportedRegionScreen,
    mpWalletId,
    baseOrigin,
    refundWalletAddress,
    refundWalletAddresses,
    // handlers
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    apiKey,
    signature,
    quoteCurrencyCode,
    defaultCurrencyCode,
    defaultBaseCurrencyCode,
    walletAddress,
    walletAddressTag,
    walletAddresses,
    walletAddressTags,
    colorCode,
    theme,
    themeId,
    language,
    baseCurrencyCode,
    baseCurrencyAmount,
    quoteCurrencyAmount,
    lockAmount,
    email,
    externalTransactionId,
    externalCustomerId,
    paymentMethod,
    redirectURL,
    showAllCurrencies,
    showOnlyCurrencies,
    showWalletAddressForm,
    unsupportedRegionRedirectUrl,
    skipUnsupportedRegionScreen,
    mpWalletId,
    refundWalletAddress,
    refundWalletAddresses
  };
  const handlers = {
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "sell",
    variant: props.variant,
    environment,
    params,
    debug,
    baseOrigin,
    handlers,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getSwapsCustomerSetupConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment
}) => {
  const {
    amount,
    amountCurrencyCode,
    theme,
    themeId,
    externalCustomerId,
    baseOrigin,
    // handlers
    onClose,
    onAuthToken,
    onLogin,
    onInitiateDeposit,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated,
    onKmsWalletsCreated,
    onTransactionCompleted,
    onUnsupportedRegion,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    apiKey,
    amount,
    amountCurrencyCode,
    theme,
    themeId,
    externalCustomerId
  };
  const handlers = {
    onClose,
    onAuthToken,
    onLogin,
    onInitiateDeposit,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated,
    onKmsWalletsCreated,
    onTransactionCompleted,
    onUnsupportedRegion
  };
  return {
    flow: "swapsCustomerSetup",
    variant: props.variant,
    environment,
    params,
    debug,
    handlers,
    baseOrigin,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getConsumerKycConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment
}) => {
  const {
    amount,
    amountCurrencyCode,
    theme,
    themeId,
    baseOrigin,
    // handlers
    onClose,
    onLogin,
    onInitiateDeposit,
    onConsumerKycComplete,
    onKmsWalletsCreated,
    onTransactionCompleted,
    onUnsupportedRegion,
    onCloseOverlay,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    apiKey,
    amount,
    amountCurrencyCode,
    theme,
    themeId
  };
  const handlers = {
    onClose,
    onLogin,
    onInitiateDeposit,
    onConsumerKycComplete,
    onKmsWalletsCreated,
    onTransactionCompleted,
    onUnsupportedRegion,
    onCloseOverlay
  };
  return {
    flow: "consumerKyc",
    variant: props.variant,
    environment,
    params,
    debug,
    handlers,
    baseOrigin,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getNftConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment,
  signature
}) => {
  const {
    // params
    contractAddress,
    tokenId,
    listingId,
    externalTransactionId,
    baseCurrencyCode,
    redirectURL,
    walletAddress,
    subPartnerName,
    metadata,
    dynamicAssetInfo,
    sellType,
    email,
    quantity,
    baseOrigin,
    // handlers
    onClose,
    onAuthToken,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onCloseOverlay,
    onTransactionCreated,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    apiKey,
    signature,
    contractAddress,
    tokenId,
    listingId,
    externalTransactionId,
    baseCurrencyCode,
    redirectURL,
    walletAddress,
    subPartnerName,
    metadata,
    dynamicAssetInfo,
    sellType,
    email,
    quantity
  };
  const handlers = {
    onClose,
    onAuthToken,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "nft",
    variant: props.variant,
    environment,
    params,
    debug,
    handlers,
    auth,
    baseOrigin,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getClaimConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment,
  signature
}) => {
  const {
    contractId,
    tokenId,
    initialScreen,
    // handlers
    onClose,
    onAuthToken,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onCloseOverlay,
    onTransactionCreated,
    baseOrigin,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    apiKey,
    signature,
    contractId,
    tokenId,
    initialScreen
  };
  const handlers = {
    onClose,
    onAuthToken,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "claim",
    variant: props.variant,
    environment,
    params,
    debug,
    handlers,
    baseOrigin,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getTopUpLedgerConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment,
  signature
}) => {
  const {
    // params
    externalCustomerId,
    theme,
    themeId,
    currencyCode,
    baseOrigin,
    // handlers
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    apiKey,
    signature,
    externalCustomerId,
    theme,
    themeId,
    currencyCode
  };
  const handlers = {
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "topup",
    variant: props.variant,
    environment,
    params,
    debug,
    handlers,
    baseOrigin,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getMoonPayBalanceDepositConfigFromProps = ({
  props,
  debug,
  environment
}) => {
  const {
    theme,
    themeId,
    baseOrigin,
    // handlers
    onClose,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onCloseOverlay,
    onTransactionCreated,
    onBalanceDepositTransferConfirmed,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    theme,
    themeId
  };
  const handlers = {
    onClose,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onCloseOverlay,
    onTransactionCreated,
    onBalanceDepositTransferConfirmed
  };
  return {
    flow: "moonPayBalanceDeposit",
    variant: props.variant,
    environment,
    params,
    debug,
    handlers,
    baseOrigin,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getMoonPayBalanceWithdrawConfigFromProps = ({
  props,
  debug,
  environment
}) => {
  const {
    theme,
    themeId,
    baseOrigin,
    // handlers
    onClose,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onCloseOverlay,
    onTransactionCreated,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    theme,
    themeId
  };
  const handlers = {
    onClose,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "moonPayBalanceWithdraw",
    variant: props.variant,
    environment,
    params,
    debug,
    baseOrigin,
    handlers,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getWithdrawLedgerConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment,
  signature
}) => {
  const {
    // params
    externalCustomerId,
    theme,
    themeId,
    baseCurrencyCode,
    baseOrigin,
    // handlers
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    apiKey,
    signature,
    externalCustomerId,
    theme,
    themeId,
    baseCurrencyCode
  };
  const handlers = {
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "withdraw",
    variant: props.variant,
    environment,
    params,
    debug,
    handlers,
    baseOrigin,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getSwapConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment,
  signature
}) => {
  const {
    // params
    walletAddress,
    walletAddressTag,
    refundWalletAddress,
    baseCurrencyCode,
    baseCurrencyAmount,
    quoteCurrencyCode,
    quoteCurrencyAmount,
    colorCode,
    theme,
    themeId,
    externalCustomerId,
    baseOrigin,
    // handlers
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    apiKey,
    signature,
    walletAddress,
    walletAddressTag,
    refundWalletAddress,
    baseCurrencyCode,
    baseCurrencyAmount,
    quoteCurrencyCode,
    quoteCurrencyAmount,
    colorCode,
    theme,
    themeId,
    externalCustomerId
  };
  const handlers = {
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "swap",
    variant: props.variant,
    environment,
    params,
    debug,
    handlers,
    baseOrigin,
    auth,
    useWarnBeforeRefresh,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`
  };
};
var getTransactionTrackerConfigFromProps = ({
  props,
  debug,
  environment
}) => {
  const {
    // params
    transactionId,
    colorCode,
    theme,
    themeId,
    baseOrigin,
    // handlers
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated,
    // auth
    auth,
    useWarnBeforeRefresh
  } = props;
  const params = {
    transactionId,
    colorCode,
    theme,
    themeId
  };
  const handlers = {
    onClose,
    onAuthToken,
    onInitiateDeposit,
    onKmsWalletsCreated,
    onLogin,
    onTransactionCompleted,
    onUnsupportedRegion,
    onSwapsCustomerSetupComplete,
    onCloseOverlay,
    onTransactionCreated
  };
  return {
    flow: "transactionTracker",
    variant: props.variant,
    environment,
    params,
    baseOrigin,
    debug,
    handlers,
    auth,
    containerNodeSelector: `#${MOONPAY_WIDGET_CONTAINER_ID}`,
    useWarnBeforeRefresh
  };
};
var getPartnerTopupConfigFromProps = ({
  props,
  apiKey,
  debug,
  environment,
  signature
}) => {
  const {
    enabledMethods,
    cryptoAmount,
    fromDefaultCurrencyCode,
    fromChainName,
    toChainName,
    testLocation
  } = props;
  const buyConfigProps = getBuyConfigFromProps({
    props,
    apiKey,
    debug,
    environment,
    signature
  });
  const params = {
    ...buyConfigProps.params,
    enabledMethods,
    cryptoAmount,
    fromDefaultCurrencyCode,
    fromChainName,
    toChainName,
    testLocation
  };
  return {
    ...buyConfigProps,
    flow: "partnerTopup",
    params
  };
};

// ../js-sdk/src/loader.ts
var scriptLoadingStatus = {
  isLoading: false,
  isLoaded: false
};
async function loadMoonPay(version = "v1") {
  return new Promise((resolve, reject) => {
    const scriptSrc = `https://static.moonpay.com/web-sdk/${version}/moonpay-web-sdk.min.js`;
    const existingScript = document.querySelector(`script[src="${scriptSrc}"]`);
    scriptLoadingStatus.isLoading = true;
    const checkLoaded = (count = 0) => {
      if (window.MoonPayWebSdk) {
        scriptLoadingStatus.isLoading = false;
        scriptLoadingStatus.isLoaded = true;
        resolve(window.MoonPayWebSdk.init);
        return;
      }
      if (count > 100) {
        scriptLoadingStatus.isLoading = false;
        reject(new Error("Loading MoonPayWebSdk script timed out."));
        return;
      }
      setTimeout(() => checkLoaded(count + 1), 100);
    };
    if (existingScript) {
      checkLoaded();
    } else {
      const script = document.createElement("script");
      script.async = true;
      script.src = scriptSrc;
      script.addEventListener("load", () => {
        scriptLoadingStatus.isLoading = false;
        scriptLoadingStatus.isLoaded = true;
        resolve(window.MoonPayWebSdk?.init);
      });
      script.addEventListener("error", () => {
        scriptLoadingStatus.isLoading = false;
        scriptLoadingStatus.isLoaded = false;
        reject(new Error("Failed to load MoonPayWebSdk script."));
      });
      document.body.appendChild(script);
    }
  });
}

// src/components/MoonPayProvider.tsx
import {
  createContext,
  useCallback as useCallback2,
  useEffect as useEffect3,
  useState as useState3
} from "react";

// ../common/src/environment.ts
function getEnvironmentFromApiKey(apiKey) {
  return apiKey.startsWith("pk_live") || apiKey.startsWith("sk_live") ? "production" : "sandbox";
}

// ../common/src/Logger.ts
var NOOP = () => void 0;
var noopLogger = {
  info: NOOP,
  warn: NOOP,
  error: NOOP
};
var Logger = class _Logger {
  prefix;
  logger;
  constructor({
    logger,
    prefix
  }) {
    this.logger = logger;
    this.prefix = prefix ?? ["Logger"];
  }
  if(condition) {
    return condition ? this : new _Logger({ logger: noopLogger });
  }
  info(...data) {
    this.logger.info(`[${this.prefix}]`, ...data);
  }
  warn(...data) {
    this.logger.warn(`[${this.prefix}]`, ...data);
  }
  error(...data) {
    this.logger.error(`[${this.prefix}]`, ...data);
  }
};

// ../common/src/react/useHasOverflow.tsx
import { useLayoutEffect, useState } from "react";

// ../common/src/react/useIsMounted.tsx
import { useRef, useEffect, useCallback } from "react";

// ../common/src/react/useRenderCount.ts
import { useRef as useRef2 } from "react";

// ../common/src/react/useScript.ts
import { useEffect as useEffect2, useState as useState2 } from "react";

// ../common/src/uuid.ts
var uuidV4 = typeof window.crypto !== "undefined" && typeof window.crypto.getRandomValues !== "undefined" ? () => {
  return ("10000000-1000-4000-8000" + -1e11).replace(
    /[018]/g,
    (c) => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
} : () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = Math.random() * 16 | 0;
    const v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
};

// src/components/MoonPayProvider.tsx
import { jsx } from "react/jsx-runtime";
var MoonPayContext = createContext({
  apiKey: "",
  environment: "sandbox",
  debug: false
});
var MoonPayProvider = ({
  children,
  apiKey,
  debug = false
}) => {
  const environment = getEnvironmentFromApiKey(apiKey);
  const [contextState, setContextState] = useState3({
    apiKey,
    environment,
    debug
  });
  const load = useCallback2(async () => {
    const moonPay = await loadMoonPay();
    setContextState((state) => ({ ...state, init: moonPay }));
  }, []);
  useEffect3(() => {
    if (!contextState.init) load();
  }, [load, contextState.init]);
  return /* @__PURE__ */ jsx(MoonPayContext.Provider, { value: contextState, children });
};

// src/useSdk.tsx
import { useCallback as useCallback3, useContext, useEffect as useEffect4, useRef as useRef3 } from "react";

// src/logger.ts
var Logger2 = class extends Logger {
  constructor() {
    super({ logger: console, prefix: ["MoonPay React SDK"] });
  }
};

// src/useSdk.tsx
var useSdk = (config, visible, onUrlSignatureRequested) => {
  const sdk = useRef3(null);
  const { init, debug } = useContext(MoonPayContext);
  const logger = useRef3(new Logger2().if(debug || false));
  const handleUpdateSignatureAndShow = useCallback3(async () => {
    if (!sdk.current) {
      return;
    }
    if (!onUrlSignatureRequested && ("walletAddress" in config || "walletAddresses" in config)) {
      logger.current.warn(
        "You must provide an `onUrlSignatureRequested` function to sign the URL when using the `walletAddress` or `walletAddresses` prop"
      );
    }
    if (onUrlSignatureRequested) {
      const url = sdk.current.generateUrlForSigning();
      try {
        const updatedSignature = await onUrlSignatureRequested?.(url);
        if (!updatedSignature) {
          return;
        }
        sdk.current?.updateSignature(updatedSignature);
      } catch (e) {
        logger.current.error(
          "Something went wrong calling the provided `onUrlSignatureRequested` function:",
          e
        );
      }
    }
    if (visible) {
      sdk.current?.show();
    }
  }, [onUrlSignatureRequested, visible, config]);
  useEffect4(() => {
    if (sdk.current) {
      sdk.current.close();
    }
    const newSdk = init?.(config) || null;
    sdk.current = newSdk;
    handleUpdateSignatureAndShow();
  }, [init, config, handleUpdateSignatureAndShow]);
};

// src/components/MoonPayWidget.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var defaultStyles = {
  width: "424px",
  height: "656px",
  margin: "32px 28px 32px 28px",
  border: "1px solid #E5E7EB",
  borderRadius: "16px",
  overflow: "hidden"
};
function MoonPayWidget({
  config,
  onUrlSignatureRequested,
  visible = true,
  className,
  style
}) {
  useSdk(config, visible, onUrlSignatureRequested);
  if (visible) {
    return /* @__PURE__ */ jsx2(
      "div",
      {
        id: MOONPAY_WIDGET_CONTAINER_ID,
        className,
        style: config.variant === "embedded" ? {
          ...defaultStyles,
          ...style
        } : void 0
      }
    );
  }
  return null;
}

// src/components/MoonPayBalanceDepositWidget.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
function MoonPayBalanceDepositWidget(props) {
  const { environment } = useContext2(MoonPayContext);
  const config = useMemo(
    () => getMoonPayBalanceDepositConfigFromProps({
      props,
      environment,
      debug: false
    }),
    [props, environment]
  );
  return /* @__PURE__ */ jsx3(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPayBalanceWithdrawWidget.tsx
import { useContext as useContext3, useMemo as useMemo2 } from "react";
import { jsx as jsx4 } from "react/jsx-runtime";
function MoonPayBalanceWithdrawWidget(props) {
  const { environment } = useContext3(MoonPayContext);
  const config = useMemo2(
    () => getMoonPayBalanceWithdrawConfigFromProps({
      props,
      environment,
      debug: false
    }),
    [props, environment]
  );
  return /* @__PURE__ */ jsx4(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPayBuyWidget.tsx
import { useContext as useContext4, useMemo as useMemo3 } from "react";
import { jsx as jsx5 } from "react/jsx-runtime";
function MoonPayBuyWidget(props) {
  const { apiKey, environment } = useContext4(MoonPayContext);
  const config = useMemo3(
    () => getBuyConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: props.signature || ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx5(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPayConsumerKycWidget.tsx
import { useContext as useContext5, useMemo as useMemo4 } from "react";
import { jsx as jsx6 } from "react/jsx-runtime";
function MoonPayConsumerKycWidget(props) {
  const { apiKey, environment } = useContext5(MoonPayContext);
  const config = useMemo4(
    () => getConsumerKycConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx6(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPayNftCheckoutWidget.tsx
import { useContext as useContext6, useMemo as useMemo5 } from "react";
import { jsx as jsx7 } from "react/jsx-runtime";
function MoonPayNftCheckoutWidget(props) {
  const { apiKey, environment } = useContext6(MoonPayContext);
  const config = useMemo5(
    () => getNftConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: props.signature || ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx7(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPayNftClaimWidget.tsx
import { useContext as useContext7, useMemo as useMemo6 } from "react";
import { jsx as jsx8 } from "react/jsx-runtime";
function MoonPayNftClaimWidget(props) {
  const { apiKey, environment } = useContext7(MoonPayContext);
  const config = useMemo6(
    () => getClaimConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: props.signature || ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx8(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPaySellWidget.tsx
import { useContext as useContext8, useMemo as useMemo7 } from "react";
import { jsx as jsx9 } from "react/jsx-runtime";
function MoonPaySellWidget(props) {
  const { apiKey, environment } = useContext8(MoonPayContext);
  const config = useMemo7(
    () => getSellConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: props.signature || ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx9(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPaySwapsCustomerSetupWidget.tsx
import { useContext as useContext9, useMemo as useMemo8 } from "react";
import { jsx as jsx10 } from "react/jsx-runtime";
function MoonPaySwapsCustomerSetupWidget(props) {
  const { apiKey, environment } = useContext9(MoonPayContext);
  const config = useMemo8(
    () => getSwapsCustomerSetupConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx10(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPaySwapWidget.tsx
import { useContext as useContext10, useMemo as useMemo9 } from "react";
import { jsx as jsx11 } from "react/jsx-runtime";
function MoonPaySwapWidget(props) {
  const { apiKey, environment } = useContext10(MoonPayContext);
  const config = useMemo9(
    () => getSwapConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: props.signature || ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx11(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPayTopUpLedgerWidget.tsx
import { useContext as useContext11, useMemo as useMemo10 } from "react";
import { jsx as jsx12 } from "react/jsx-runtime";
function MoonPayTopUpLedgerWidget(props) {
  const { apiKey, environment } = useContext11(MoonPayContext);
  const config = useMemo10(
    () => getTopUpLedgerConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: props.signature || ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx12(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPayTopupWidget.tsx
import { useContext as useContext12, useMemo as useMemo11 } from "react";
import { jsx as jsx13 } from "react/jsx-runtime";
function MoonPayTopUpWidget(props) {
  const { apiKey, environment } = useContext12(MoonPayContext);
  const {
    visible,
    className,
    style,
    onUrlSignatureRequested,
    signature
  } = props;
  const config = useMemo11(
    () => getPartnerTopupConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: signature || ""
    }),
    [props, apiKey, environment, signature]
  );
  return /* @__PURE__ */ jsx13(
    MoonPayWidget,
    {
      config,
      onUrlSignatureRequested,
      visible,
      className,
      style
    }
  );
}

// src/components/MoonPayTransactionTrackerWidget.tsx
import { useContext as useContext13, useMemo as useMemo12 } from "react";
import { jsx as jsx14 } from "react/jsx-runtime";
function MoonPayTransactionTrackerWidget(props) {
  const { apiKey, environment } = useContext13(MoonPayContext);
  const config = useMemo12(
    () => getTransactionTrackerConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx14(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}

// src/components/MoonPayWithdrawLedgerWidget.tsx
import { useContext as useContext14, useMemo as useMemo13 } from "react";
import { jsx as jsx15 } from "react/jsx-runtime";
function MoonPayWithdrawLedgerWidget(props) {
  const { apiKey, environment } = useContext14(MoonPayContext);
  const config = useMemo13(
    () => getWithdrawLedgerConfigFromProps({
      props,
      apiKey,
      environment,
      debug: false,
      signature: props.signature || ""
    }),
    [props, apiKey, environment]
  );
  return /* @__PURE__ */ jsx15(
    MoonPayWidget,
    {
      config,
      visible: props.visible,
      onUrlSignatureRequested: props.onUrlSignatureRequested,
      className: props.className,
      style: props.style
    }
  );
}
export {
  MoonPayBalanceDepositWidget,
  MoonPayBalanceWithdrawWidget,
  MoonPayBuyWidget,
  MoonPayConsumerKycWidget,
  MoonPayContext,
  MoonPayNftCheckoutWidget,
  MoonPayNftClaimWidget,
  MoonPayProvider,
  MoonPaySellWidget,
  MoonPaySwapWidget,
  MoonPaySwapsCustomerSetupWidget,
  MoonPayTopUpLedgerWidget,
  MoonPayTopUpWidget,
  MoonPayTransactionTrackerWidget,
  MoonPayWithdrawLedgerWidget
};
//# sourceMappingURL=index.js.map