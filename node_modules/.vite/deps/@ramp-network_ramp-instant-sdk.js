import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  __toESM,
  init_globalPolyfills,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-F62UFKTJ.js";

// node_modules/.pnpm/@ramp-network+ramp-instant-sdk@6.0.1/node_modules/@ramp-network/ramp-instant-sdk/dist/ramp-instant-sdk.es5.js
init_globalPolyfills();
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var isLocked = false;
var originalOverflow = null;
var originalPaddingRight = null;
var originalPosition = null;
var originalTop = null;
var originalLeft = null;
var originalWidth = null;
var originalHeight = null;
var scrollPosition = null;
function isIOS() {
  return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
}
function disableBodyScroll() {
  if (!isLocked) {
    var body = document.body;
    var scrollbarWidth = window.innerWidth - body.clientWidth;
    originalOverflow = body.style.overflow;
    originalPaddingRight = body.style.paddingRight;
    originalPosition = body.style.position;
    originalTop = body.style.top;
    originalLeft = body.style.left;
    originalWidth = body.style.width;
    originalHeight = body.style.height;
    scrollPosition = window.scrollY;
    body.style.overflow = "hidden";
    if (scrollbarWidth > 0) {
      body.style.paddingRight = "".concat(scrollbarWidth, "px");
    }
    if (isIOS()) {
      body.style.position = "fixed";
      body.style.top = "-".concat(scrollPosition, "px");
      body.style.left = "0";
      body.style.width = "100%";
      body.style.height = "100%";
      body.style.touchAction = "none";
    }
    isLocked = true;
  }
}
function clearAllBodyScrollLocks() {
  if (isLocked) {
    var body = document.body;
    body.style.overflow = originalOverflow || "";
    body.style.paddingRight = originalPaddingRight || "";
    body.style.position = originalPosition || "";
    body.style.top = originalTop || "";
    body.style.left = originalLeft || "";
    body.style.width = originalWidth || "";
    body.style.height = originalHeight || "";
    body.style.touchAction = "";
    if (isIOS() && scrollPosition !== null) {
      window.scrollTo(0, scrollPosition);
    }
    originalOverflow = null;
    originalPaddingRight = null;
    originalPosition = null;
    originalTop = null;
    originalLeft = null;
    originalWidth = null;
    originalHeight = null;
    scrollPosition = null;
    isLocked = false;
  }
}
var baseWidgetUrl = "https://app.rampnetwork.com/";
var SEND_CRYPTO_SUPPORTED_VERSION = 1;
var SDK_VERSION = "6.0.1";
var PaymentMethodName;
(function(PaymentMethodName2) {
  PaymentMethodName2["MANUAL_BANK_TRANSFER"] = "MANUAL_BANK_TRANSFER";
  PaymentMethodName2["AUTO_BANK_TRANSFER"] = "AUTO_BANK_TRANSFER";
  PaymentMethodName2["CARD_PAYMENT"] = "CARD_PAYMENT";
  PaymentMethodName2["APPLE_PAY"] = "APPLE_PAY";
})(PaymentMethodName || (PaymentMethodName = {}));
var PaymentMethodType;
(function(PaymentMethodType2) {
  PaymentMethodType2["SEPA"] = "SEPA";
  PaymentMethodType2["CARD"] = "CARD";
  PaymentMethodType2["APPLEPAY"] = "APPLEPAY";
  PaymentMethodType2["GOOGLEPAY"] = "GOOGLEPAY";
  PaymentMethodType2["PISP"] = "PISP";
  PaymentMethodType2["SOFORT"] = "SOFORT";
  PaymentMethodType2["PIX"] = "PIX";
})(PaymentMethodType || (PaymentMethodType = {}));
var PurchaseStatus;
(function(PurchaseStatus2) {
  PurchaseStatus2["INITIALIZED"] = "INITIALIZED";
  PurchaseStatus2["PAYMENT_STARTED"] = "PAYMENT_STARTED";
  PurchaseStatus2["PAYMENT_IN_PROGRESS"] = "PAYMENT_IN_PROGRESS";
  PurchaseStatus2["PAYMENT_FAILED"] = "PAYMENT_FAILED";
  PurchaseStatus2["PAYMENT_EXECUTED"] = "PAYMENT_EXECUTED";
  PurchaseStatus2["FIAT_RECEIVED"] = "FIAT_RECEIVED";
  PurchaseStatus2["FIAT_SENT"] = "FIAT_SENT";
  PurchaseStatus2["EXPIRED"] = "EXPIRED";
  PurchaseStatus2["CANCELLED"] = "CANCELLED";
  PurchaseStatus2["RELEASING"] = "RELEASING";
  PurchaseStatus2["RELEASED"] = "RELEASED";
})(PurchaseStatus || (PurchaseStatus = {}));
var EventSeverity;
(function(EventSeverity2) {
  EventSeverity2["VERBOSE"] = "VERBOSE";
  EventSeverity2["DEBUG"] = "DEBUG";
  EventSeverity2["INFO"] = "INFO";
  EventSeverity2["WARNING"] = "WARNING";
  EventSeverity2["ERROR"] = "ERROR";
  EventSeverity2["CRITICAL"] = "CRITICAL";
})(EventSeverity || (EventSeverity = {}));
var WidgetEventTypes;
(function(WidgetEventTypes2) {
  WidgetEventTypes2["WIDGET_CLOSE"] = "WIDGET_CLOSE";
  WidgetEventTypes2["WIDGET_CONFIG_DONE"] = "WIDGET_CONFIG_DONE";
  WidgetEventTypes2["WIDGET_CONFIG_FAILED"] = "WIDGET_CONFIG_FAILED";
  WidgetEventTypes2["PURCHASE_CREATED"] = "PURCHASE_CREATED";
  WidgetEventTypes2["OFFRAMP_SALE_CREATED"] = "OFFRAMP_SALE_CREATED";
})(WidgetEventTypes || (WidgetEventTypes = {}));
var InternalEventTypes;
(function(InternalEventTypes2) {
  InternalEventTypes2["APP_VERSION"] = "APP_VERSION";
  InternalEventTypes2["WIDGET_CLOSE_REQUEST"] = "WIDGET_CLOSE_REQUEST";
  InternalEventTypes2["WIDGET_CLOSE_REQUEST_CANCELLED"] = "WIDGET_CLOSE_REQUEST_CANCELLED";
  InternalEventTypes2["WIDGET_CLOSE_REQUEST_CONFIRMED"] = "WIDGET_CLOSE_REQUEST_CONFIRMED";
  InternalEventTypes2["REQUEST_CRYPTO_ACCOUNT"] = "REQUEST_CRYPTO_ACCOUNT";
  InternalEventTypes2["SEND_CRYPTO"] = "SEND_CRYPTO";
})(InternalEventTypes || (InternalEventTypes = {}));
var InternalSdkEventTypes;
(function(InternalSdkEventTypes2) {
  InternalSdkEventTypes2["REQUEST_CRYPTO_ACCOUNT_RESULT"] = "REQUEST_CRYPTO_ACCOUNT_RESULT";
  InternalSdkEventTypes2["SEND_CRYPTO_RESULT"] = "SEND_CRYPTO_RESULT";
})(InternalSdkEventTypes || (InternalSdkEventTypes = {}));
function getRandomIntString() {
  try {
    return String(crypto.getRandomValues(new Uint32Array(1))[0]);
  } catch (_a) {
    return String(Math.floor(Math.random() * 1e7));
  }
}
var widgetDesktopWidth = 895;
var widgetDesktopHeight = 590;
var minWidgetMobileWidth = 320;
var minWidgetMobileHeight = 667;
function normalizeConfigAndLogErrorsOnInvalidFields(config) {
  var errors = [];
  var configCopy = __assign({}, config);
  if (![
    "desktop",
    "mobile",
    "hosted-desktop",
    "hosted-mobile",
    "hosted-auto",
    "auto",
    "embedded-desktop",
    "embedded-mobile"
  ].includes(config.variant)) {
    configCopy.variant = "desktop";
    errors.push({
      fieldName: "variant",
      description: "Invalid value for `variant` config field ",
      exampleValue: "'desktop'",
      severity: EventSeverity.WARNING
    });
  }
  if (config.variant === "embedded-desktop" || config.variant === "embedded-mobile") {
    validateContainerNode(config.containerNode, config.variant);
  }
  if (!["embedded-desktop", "embedded-mobile"].includes(configCopy.variant)) {
    delete configCopy.containerNode;
  }
  if (typeof config.useSendCryptoCallback !== "undefined") {
    delete config.useSendCryptoCallback;
  }
  if (config.credentialless === void 0) {
    configCopy.credentialless = false;
  }
  logErrors(errors);
  return configCopy;
}
function logErrors(errors) {
  if (!errors.length) {
    return;
  }
  console.group("Config errors");
  errors.forEach(function(error) {
    console.group(error.fieldName);
    console.log(error.description);
    console.log("Example expected value: ".concat(error.exampleValue));
    console.log("Severity: ".concat(error.severity));
    console.groupEnd();
  });
  console.groupEnd();
}
function initEventListenersDict() {
  var widgetEventTypes = Array.from(Object.values(WidgetEventTypes));
  var internalEventTypes = Array.from(Object.values(InternalEventTypes));
  return __spreadArray(__spreadArray([], widgetEventTypes, true), internalEventTypes, true).reduce(function(listenersDict, eventType) {
    listenersDict[eventType] = [];
    return listenersDict;
  }, {});
}
function determineWidgetVariant(config) {
  var _a;
  var mediaQuery = "(min-width: 920px) and (min-height: 630px)";
  var variant = (_a = config.variant) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase();
  if (variant === "mobile" || variant === "desktop" || variant === "hosted-mobile" || variant === "hosted-desktop" || variant === "embedded-desktop" || variant === "embedded-mobile") {
    return variant;
  }
  var isDesktop = window.matchMedia(mediaQuery).matches;
  if (variant === "hosted-auto") {
    return isDesktop ? "hosted-desktop" : "hosted-mobile";
  }
  return isDesktop ? "desktop" : "mobile";
}
function isHtmlElement(element) {
  return typeof element.blur === "function";
}
function validateContainerNode(containerNode, _variant) {
  if (!document.body) {
    throw new Error("Couldn't find <body> element.");
  }
  if (!(containerNode instanceof HTMLElement)) {
    throw new Error("Container node has to be a proper HTML element.");
  }
  if (!document.body.contains(containerNode)) {
    throw new Error("Container node must be attached to the document.");
  }
}
function getBaseUrl(config) {
  return new URL(config.url || baseWidgetUrl);
}
function initWidgetIframeUrl(config) {
  var baseUrl = getBaseUrl(config);
  var hostUrl = window.location.origin;
  config.containerNode;
  config.url;
  var configWithoutIframeUrl = __rest(config, ["containerNode", "url"]);
  var preparedConfig = __assign(__assign({}, configWithoutIframeUrl), { hostUrl });
  Object.entries(preparedConfig).forEach(function(_a) {
    var key = _a[0], value = _a[1];
    if (value) {
      baseUrl.searchParams.append(key, Array.isArray(value) ? value.join(",") : value.toString());
    }
  });
  return baseUrl.toString();
}
function initDOMNodeWithOverlay(url, dispatch, config) {
  var body = document.querySelector("body");
  var shadowHost = document.createElement("div");
  shadowHost.style.width = "100%";
  shadowHost.style.height = "100%";
  var shadow = shadowHost.attachShadow({ mode: "open" });
  shadow.appendChild(getStylesForShadowDom(config.variant));
  var iframe = prepareIframeNode(url, config.variant, void 0, config.credentialless);
  var overlay = prepareOverlayNode(iframe, dispatch);
  overlay.appendChild(iframe);
  shadow.appendChild(overlay);
  return {
    body,
    iframe,
    overlay,
    shadow,
    shadowHost
  };
}
function initDOMNodeWithoutOverlay(url, _dispatch, config) {
  var body = document.querySelector("body");
  var shadowHost = document.createElement("div");
  shadowHost.style.width = "100%";
  shadowHost.style.height = "100%";
  var shadow = shadowHost.attachShadow({ mode: "open" });
  var container = document.createElement("div");
  container.classList.add("embedded-container");
  container.classList.add("constrained");
  shadow.appendChild(container);
  var loader = document.createElement("div");
  loader.classList.add("loader-container");
  loader.innerHTML = '\n    <svg width="92" height="60" viewBox="0 0 51 32" fill="none" xmlns="http://www.w3.org/2000/svg" class="loader">\n      <path d="M16.2232 18.8309L22.282 24.912C22.7953 25.4272 22.7948 26.2647 22.281 26.7792L17.651 31.4158C16.8619 32.1947 15.5719 32.1947 14.7828 31.4158L0.591812 17.4093C-0.197271 16.6305 -0.197271 15.3571 0.591812 14.5783L14.7828 0.584122C15.5719 -0.194707 16.8619 -0.194707 17.651 0.584122L22.281 5.22078C22.7948 5.73535 22.7953 6.57281 22.282 7.08795L16.2232 13.1691C14.645 14.7267 14.645 17.2733 16.2232 18.8309Z" fill="#21BF73"></path>\n      <path d="M34.4433 18.8309L28.3845 24.912C27.8712 25.4272 27.8717 26.2647 28.3855 26.7792L33.0155 31.4158C33.8046 32.1947 35.0946 32.1947 35.8837 31.4158L50.0747 17.4093C50.8638 16.6305 50.8638 15.3571 50.0747 14.5783L35.8837 0.584122C35.0946 -0.194707 33.8046 -0.194707 33.0155 0.584122L28.3855 5.22078C27.8717 5.73535 27.8712 6.57281 28.3845 7.08795L34.4433 13.1691C36.0215 14.7267 36.0215 17.2733 34.4433 18.8309Z" fill="#0A6E5C"></path>\n      <path d="M17.8128 17.157C17.1737 16.518 17.1737 15.482 17.8128 14.843L24.1765 8.47926C24.8155 7.84025 25.8515 7.84025 26.4905 8.47926L32.8542 14.843C33.4932 15.482 33.4932 16.518 32.8542 17.157L26.4905 23.5207C25.8515 24.1598 24.8155 24.1598 24.1765 23.5207L17.8128 17.157Z" fill="#21BF73"></path>\n    </svg>';
  container.appendChild(loader);
  shadow.appendChild(getStylesForShadowDom(config.variant));
  var iframe = prepareIframeNode(url, config.variant, config.containerNode);
  container.appendChild(iframe);
  return {
    body,
    iframe,
    overlay: null,
    shadow,
    shadowHost,
    container
  };
}
function importFonts() {
  if (document.querySelector("[data-ramp-font]")) {
    return;
  }
  var font = document.createElement("link");
  font.setAttribute("href", "https://fonts.googleapis.com/css?family=Poppins:200,400,500,600,700&display=swap&subset=latin-ext");
  font.setAttribute("rel", "stylesheet");
  font.setAttribute("data-ramp-font", "");
  document.head.appendChild(font);
}
function prepareIframeNode(url, variant, containerNode, credentialless) {
  var iframe = document.createElement("iframe");
  iframe.setAttribute("src", url);
  if (credentialless) {
    iframe.setAttribute("credentialless", "credentialless");
  }
  if (containerNode) {
    iframe.setAttribute("width", variant === "desktop" || variant === "embedded-desktop" ? widgetDesktopWidth.toString() : containerNode.getBoundingClientRect().width.toString());
    iframe.setAttribute("height", variant === "desktop" || variant === "embedded-desktop" ? widgetDesktopHeight.toString() : containerNode.getBoundingClientRect().height.toString());
  } else {
    iframe.setAttribute("width", variant === "desktop" || variant === "embedded-desktop" ? widgetDesktopWidth.toString() : window.innerWidth.toString());
    iframe.setAttribute("height", variant === "desktop" || variant === "embedded-desktop" ? widgetDesktopHeight.toString() : window.innerHeight.toString());
  }
  iframe.setAttribute("allow", "payment; microphone; camera; clipboard-read; clipboard-write");
  iframe.classList.add("iframe");
  return iframe;
}
function makeIframeResponsive(iframe, container, containerNode) {
  if (container === null || container === void 0 ? void 0 : container.classList.contains("constrained")) {
    container.classList.remove("constrained");
  }
  var updateIframeSize = function() {
    if (containerNode) {
      iframe.setAttribute("width", containerNode.getBoundingClientRect().width.toString());
      iframe.setAttribute("height", containerNode.getBoundingClientRect().height.toString());
    } else {
      iframe.setAttribute("width", window.innerWidth.toString());
      iframe.setAttribute("height", window.innerHeight.toString());
    }
  };
  updateIframeSize();
  var resizeObserver = new ResizeObserver(function() {
    updateIframeSize();
  });
  if (containerNode) {
    resizeObserver.observe(containerNode);
  } else {
    resizeObserver.observe(document.body);
  }
  var parentNode = iframe.parentNode;
  if (parentNode) {
    var mutationObserver_1 = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (Array.from(mutation.removedNodes).includes(iframe)) {
          resizeObserver.disconnect();
          mutationObserver_1.disconnect();
        }
      });
    });
    mutationObserver_1.observe(parentNode, { childList: true });
  }
  return iframe;
}
function prepareOverlayNode(iframe, dispatch) {
  var overlay = document.createElement("div");
  overlay.classList.add("overlay");
  var loader = document.createElement("div");
  loader.classList.add("loader-container");
  loader.innerHTML = '\n    <svg width="92" height="60" viewBox="0 0 51 32" fill="none" xmlns="http://www.w3.org/2000/svg" class="loader">\n      <path d="M16.2232 18.8309L22.282 24.912C22.7953 25.4272 22.7948 26.2647 22.281 26.7792L17.651 31.4158C16.8619 32.1947 15.5719 32.1947 14.7828 31.4158L0.591812 17.4093C-0.197271 16.6305 -0.197271 15.3571 0.591812 14.5783L14.7828 0.584122C15.5719 -0.194707 16.8619 -0.194707 17.651 0.584122L22.281 5.22078C22.7948 5.73535 22.7953 6.57281 22.282 7.08795L16.2232 13.1691C14.645 14.7267 14.645 17.2733 16.2232 18.8309Z" fill="#21BF73"></path>\n      <path d="M34.4433 18.8309L28.3845 24.912C27.8712 25.4272 27.8717 26.2647 28.3855 26.7792L33.0155 31.4158C33.8046 32.1947 35.0946 32.1947 35.8837 31.4158L50.0747 17.4093C50.8638 16.6305 50.8638 15.3571 50.0747 14.5783L35.8837 0.584122C35.0946 -0.194707 33.8046 -0.194707 33.0155 0.584122L28.3855 5.22078C27.8717 5.73535 27.8712 6.57281 28.3845 7.08795L34.4433 13.1691C36.0215 14.7267 36.0215 17.2733 34.4433 18.8309Z" fill="#0A6E5C"></path>\n      <path d="M17.8128 17.157C17.1737 16.518 17.1737 15.482 17.8128 14.843L24.1765 8.47926C24.8155 7.84025 25.8515 7.84025 26.4905 8.47926L32.8542 14.843C33.4932 15.482 33.4932 16.518 32.8542 17.157L26.4905 23.5207C25.8515 24.1598 24.8155 24.1598 24.1765 23.5207L17.8128 17.157Z" fill="#21BF73"></path>\n    </svg>';
  overlay.appendChild(loader);
  overlay.addEventListener("click", function(event) {
    if (event.target !== iframe && !overlay.querySelectorAll(".close-modal").length) {
      dispatch({
        type: InternalEventTypes.WIDGET_CLOSE_REQUEST,
        payload: null,
        internal: true
      });
    }
  });
  return overlay;
}
function areUrlsEqual(url0, url1) {
  return new URL(url0).toString() === new URL(url1).toString();
}
function isCloseModalAlreadyOpen(containerNode) {
  return containerNode.querySelectorAll(".close-modal").length !== 0;
}
function prepareCloseModalNode(dispatch) {
  var container = document.createElement("div");
  container.classList.add("close-modal");
  var textEl = document.createElement("div");
  textEl.classList.add("close-modal__text");
  textEl.textContent = "Are you sure you want to exit Ramp Network and abandon the transaction?";
  var buttonContainer = document.createElement("div");
  buttonContainer.classList.add("close-modal__button-container");
  var cancelButton = document.createElement("button");
  cancelButton.setAttribute("type", "button");
  cancelButton.classList.add("close-modal__button");
  cancelButton.classList.add("close-modal__button--cancel");
  cancelButton.textContent = "Cancel";
  cancelButton.addEventListener("click", function(event) {
    event.stopPropagation();
    dispatch({
      type: InternalEventTypes.WIDGET_CLOSE_REQUEST_CANCELLED,
      payload: null,
      internal: true
    });
  });
  var exitButton = document.createElement("button");
  exitButton.setAttribute("type", "button");
  exitButton.classList.add("close-modal__button");
  exitButton.classList.add("close-modal__button--exit");
  exitButton.textContent = "Exit";
  exitButton.addEventListener("click", function(event) {
    event.stopPropagation();
    dispatch({
      type: InternalEventTypes.WIDGET_CLOSE_REQUEST_CONFIRMED,
      payload: null,
      internal: true
    });
  });
  buttonContainer.appendChild(cancelButton);
  buttonContainer.appendChild(exitButton);
  container.appendChild(textEl);
  container.appendChild(buttonContainer);
  return container;
}
function getStylesForShadowDom(variant) {
  var styles = document.createElement("style");
  var isMobile = variant === "mobile" || variant === "hosted-mobile" || variant === "embedded-mobile" || variant === "webview-mobile";
  var isEmbedded = variant === "embedded-mobile" || variant === "embedded-desktop";
  styles.textContent = "\n    .overlay {\n      position: fixed;\n      z-index: 1000;\n      width: 100vw;\n      height: ".concat(isMobile ? "100%;" : "100vh;", "\n      top: 0;\n      left: 0;\n      overflow: hidden;\n      background-color: rgba(0, 0, 0, 0.5);\n      display: flex;\n      flex-flow: row nowrap;\n      justify-content: center;\n      ").concat(isMobile ? "align-items: flex-start;" : "align-items: center;", "\n    }\n\n    .embedded-container {\n      z-index: 1000;\n      position: relative;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-flow: row nowrap;\n      justify-content: center;\n      ").concat(isMobile ? "align-items: flex-start;" : "align-items: center;", "\n    }\n\n    .embedded-container.constrained {\n      min-width: ").concat(isMobile ? minWidgetMobileWidth : widgetDesktopWidth, "px;\n      min-height: ").concat(isMobile ? minWidgetMobileHeight : widgetDesktopHeight, "px;\n    }\n\n    .loader-container {\n      align-self: center;\n    }\n\n    .loader {\n      transform-origin: center;\n      animation: logoAnimation 4s linear infinite;\n      width: 100px;\n      height: auto;\n      align-self: center;\n    }\n\n    .loader path:nth-child(3) {\n      transform-origin: center;\n      position: relative;\n    }\n\n    .loader path:nth-child(1) {\n      transform-origin: center;\n      position: relative;\n      animation: box1Animation 4s linear infinite;\n      transform: scale(0.4) translateX(6px);\n    }\n\n    .loader path:nth-child(2) {\n      transform-origin: center;\n      position: relative;\n      animation: box4Animation 4s linear infinite;\n      transform: scale(0.4) translateX(-6px);\n    }\n\n    @keyframes logoAnimation {\n      10% {\n        transform: rotate(180deg);\n      }\n      30%{\n        transform: rotate(360deg);\n      }\n      70% {\n        transform: rotate(360deg);\n      }\n      90% {\n        transform: rotate(520deg);\n      }\n      100% {\n        transform: rotate(720deg);\n      }\n    }\n\n    @keyframes box1Animation {\n      0%, 10% {\n        transform: scale(0.4) translateX(6px);\n      }\n      30%, 70% {\n        transform: scale(1) translateX(0);\n      }\n      90% {\n        transform: scale(0.4) translateX(6px);\n      }\n    }\n\n\n    @keyframes box4Animation {\n      0%, 10% {\n        transform: scale(0.4) translateX(-6px);\n      }\n      30%, 70% {\n        transform: scale(1) translateX(0);\n      }\n      90% {\n        transform: scale(0.4) translateX(-6px);\n      }\n    }\n\n    .iframe {\n      border: none;\n      user-select: none;\n      visibility: hidden;\n      position: absolute;\n      color-scheme: only light;\n    }\n\n    .iframe.visible {\n      visibility: visible;\n      ").concat(!isEmbedded && isMobile ? "\n        width: 100vw;\n        height: 100%;\n      " : "", "\n    }\n\n    .close-modal {\n      font-family: 'Poppins', sans-serif;\n      width: 678px;\n      height: 276px;\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      z-index: 9999;\n      box-shadow: 0px 54px 200px rgba(36, 37, 57, 0.2);\n      display: flex;\n      flex-flow: column nowrap;\n      justify-content: flex-start;\n      align-items: center;\n      padding: 35px;\n      border-radius: 8px;\n      background: #fff;\n\n      box-sizing: border-box;\n    }\n\n    .close-modal * {\n      box-sizing: border-box;\n    }\n\n    .close-modal__text {\n      margin: 40px auto 30px;\n      font-weight: 600;\n      font-size: 24px;\n      line-height: 36px;\n      text-align: center;\n\n      color: #242539;\n    }\n\n    .close-modal__button-container {\n      width: 318px;\n      display: flex;\n      flex-flow: row nowrap;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .close-modal__button {\n      background: #fff;\n      border: 2px solid #EDEEF3;\n      border-radius: 74px;\n      width: 152px;\n      height: 56px;\n      cursor: pointer;\n      font-weight: 600;\n      font-size: 14px;\n      line-height: 21px;\n      color: #2B2D56;\n      text-transform: uppercase;\n    }\n\n    .close-modal__button--exit {\n      background: #DD3E56;\n      box-shadow: 0px 8px 34px rgba(221, 62, 86, 0.4);\n      color: #fff;\n      border-color: transparent;\n    }\n\n    @supports (width: 100dvw) {\n      .overlay {\n        width: 100dvw;\n      }\n\n      .iframe.visible {\n        ").concat(!isEmbedded && isMobile ? "\n          width: 100dvw;\n          height: 100%;\n        " : "", "\n      }\n    }\n\n    @supports (height: 100dvh) {\n      .overlay {\n        height: ").concat(isMobile ? "100%;" : "100dvh;", "\n      }\n    }\n  ");
  return styles;
}
var RampInstantSDK = (
  /** @class */
  function() {
    function RampInstantSDK2(config) {
      this._listeners = initEventListenersDict();
      this._isVisible = false;
      this._onSendCryptoCallback = void 0;
      importFonts();
      this.unsubscribe = this.unsubscribe.bind(this);
      this.on = this.on.bind(this);
      this.show = this.show.bind(this);
      this._handleEscapeClick = this._handleEscapeClick.bind(this);
      this._dispatchEvent = this._dispatchEvent.bind(this);
      this._subscribeToWidgetEvents = this._subscribeToWidgetEvents.bind(this);
      this._on = this._on.bind(this);
      this._registerSdkEventHandlers = this._registerSdkEventHandlers.bind(this);
      this._subscribeToWidgetEvents = this._subscribeToWidgetEvents.bind(this);
      this._onSendCrypto = this._onSendCrypto.bind(this);
      this._rawNormalizedConfig = normalizeConfigAndLogErrorsOnInvalidFields(__assign({ variant: "desktop" }, config));
      this._config = __assign(__assign({}, this._rawNormalizedConfig), this._getHostConfigSdkParams(this._rawNormalizedConfig, config.useSendCryptoCallback));
    }
    RampInstantSDK2.prototype.show = function() {
      if (this._isVisible) {
        throw new Error("Widget is already visible - you can only call this once per instance");
      }
      if (document.activeElement && isHtmlElement(document.activeElement)) {
        document.activeElement.blur();
      }
      this._registerSdkEventHandlers();
      window.addEventListener("message", this._subscribeToWidgetEvents);
      if (this._isConfiguredAsHosted()) {
        this._showUsingHostedMode();
      } else if (this._isConfiguredAsEmbedded()) {
        this._showUsingEmbeddedMode();
      } else if (this._isConfiguredWithOverlay()) {
        this._showUsingOverlayMode();
      }
      window.addEventListener("keydown", this._handleEscapeClick, true);
      return this;
    };
    RampInstantSDK2.prototype.on = function(type, callback) {
      this._on(type, callback, false);
      return this;
    };
    RampInstantSDK2.prototype.unsubscribe = function(type, callback) {
      var _this = this;
      var _a;
      if (type === "*") {
        var allTypes = Object.entries(this._listeners);
        allTypes.forEach(function(_a2) {
          var key = _a2[0], eventHandlers = _a2[1];
          var filteredHandlers = eventHandlers.filter(function(l) {
            return l.callback !== callback;
          });
          _this._listeners[key] = filteredHandlers;
        });
      } else {
        this._listeners[type] = (_a = this._listeners[type]) === null || _a === void 0 ? void 0 : _a.filter(function(l) {
          return l.callback !== callback;
        });
      }
      return this;
    };
    RampInstantSDK2.prototype._on = function(type, callback, internal) {
      var _a;
      if (type !== "*" && !this._listeners[type]) {
        console.warn("Unknown / unsupported event name - '".concat(type, "'. This listener will have no effect."));
      }
      if (type === "*") {
        var allTypes = Object.values(this._listeners);
        allTypes.forEach(function(eventHandlers) {
          return eventHandlers.push({ callback, internal });
        });
      } else {
        (_a = this._listeners[type]) === null || _a === void 0 ? void 0 : _a.push({ callback, internal });
      }
    };
    RampInstantSDK2.prototype.close = function() {
      this._dispatchEvent({
        type: WidgetEventTypes.WIDGET_CLOSE,
        payload: null,
        widgetInstanceId: this._config.widgetInstanceId
      });
      return this;
    };
    RampInstantSDK2.prototype.onSendCrypto = function(callback) {
      this._onSendCryptoCallback = callback;
      return this;
    };
    RampInstantSDK2.prototype.onRequestCryptoAccount = function(callback) {
      var _this = this;
      var onRequestCryptoAccount = function(event) {
        return __awaiter(_this, void 0, void 0, function() {
          var result, e_1, errorMessage;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, callback(event.payload.type, event.payload.assetSymbol)];
              case 1:
                result = _a.sent();
                if (!result.address) {
                  throw new Error("Missing address in the callback result");
                }
                return [3, 3];
              case 2:
                e_1 = _a.sent();
                errorMessage = void 0;
                if (typeof e_1 === "string") {
                  errorMessage = e_1;
                } else if (e_1 instanceof Error) {
                  errorMessage = e_1.message;
                }
                this._sendEventToWidget({
                  type: InternalSdkEventTypes.REQUEST_CRYPTO_ACCOUNT_RESULT,
                  payload: {
                    error: errorMessage
                  }
                });
                return [
                  2
                  /*return*/
                ];
              case 3:
                this._sendEventToWidget({
                  type: InternalSdkEventTypes.REQUEST_CRYPTO_ACCOUNT_RESULT,
                  payload: {
                    address: result.address,
                    type: result.type,
                    name: result.name,
                    assetSymbol: result.assetSymbol
                  }
                });
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      this._on(InternalEventTypes.REQUEST_CRYPTO_ACCOUNT, onRequestCryptoAccount, true);
      return this;
    };
    RampInstantSDK2.prototype._subscribeToWidgetEvents = function(event) {
      if (!event.data) {
        return;
      }
      if (!areUrlsEqual(event.origin, getBaseUrl(this._config).origin)) {
        return;
      }
      var eventData = event.data;
      if (!eventData.widgetInstanceId || eventData.widgetInstanceId !== this._config.widgetInstanceId) {
        return;
      }
      this._dispatchEvent(eventData);
    };
    RampInstantSDK2.prototype._registerSdkEventHandlers = function() {
      var _this = this;
      this._on(InternalEventTypes.APP_VERSION, function(event) {
        var _a, _b;
        var major = ((_a = event.payload.version.split(".")) !== null && _a !== void 0 ? _a : [])[0];
        var parsedMajor = Number(major);
        if (parsedMajor >= 2 && ((_b = _this.domNodes) === null || _b === void 0 ? void 0 : _b.iframe)) {
          makeIframeResponsive(_this.domNodes.iframe, _this.domNodes.container, _this._config.containerNode);
          _this._makeVisible();
          _this._removeEscapeHandler();
        }
      }, true);
      this._on(WidgetEventTypes.WIDGET_CLOSE, function(_event) {
        var _a, _b;
        if (_this._isConfiguredAsHosted()) {
          try {
            (_a = _this.widgetWindow) === null || _a === void 0 ? void 0 : _a.close();
          } catch (e) {
            throw new Error("Could not close the widget window");
          }
        } else {
          (_b = _this.domNodes) === null || _b === void 0 ? void 0 : _b.shadowHost.remove();
          clearAllBodyScrollLocks();
        }
        _this._teardownEventSubscriptions();
      }, true);
      if (this._config.useSendCryptoCallbackVersion) {
        this.on(InternalEventTypes.SEND_CRYPTO, this._onSendCrypto);
      }
      this._on(WidgetEventTypes.WIDGET_CONFIG_DONE, function() {
        return _this._onConfigEvent();
      }, true);
      this._on(WidgetEventTypes.WIDGET_CONFIG_FAILED, function() {
        return _this._onConfigEvent();
      }, true);
      this._on(InternalEventTypes.WIDGET_CLOSE_REQUEST, function(_event) {
        if (_this._isConfiguredAsHosted() || _this._isConfiguredAsEmbedded()) {
          return;
        }
        if (_this._config.variant === "mobile" || isCloseModalAlreadyOpen(_this.domNodes.overlay)) {
          return;
        }
        _this.domNodes.overlay.appendChild(prepareCloseModalNode(_this._dispatchEvent));
      }, true);
      this._on(InternalEventTypes.WIDGET_CLOSE_REQUEST_CONFIRMED, function(_event) {
        _this._dispatchEvent({
          type: WidgetEventTypes.WIDGET_CLOSE,
          payload: null,
          widgetInstanceId: _this._config.widgetInstanceId
        });
      }, true);
      this._on(InternalEventTypes.WIDGET_CLOSE_REQUEST_CANCELLED, function(_event) {
        if (_this._isConfiguredAsHosted() || _this._isConfiguredAsEmbedded()) {
          return;
        }
        var modal = _this.domNodes.overlay.querySelector(".close-modal");
        if (modal) {
          modal.remove();
        }
      }, true);
    };
    RampInstantSDK2.prototype._sendEventToWidget = function(event) {
      var _a, _b, _c;
      if (!this._isVisible) {
        throw new Error("Widget is not visible couldn't send the event");
      }
      try {
        (_c = (_a = this.widgetWindow) !== null && _a !== void 0 ? _a : (_b = this.domNodes) === null || _b === void 0 ? void 0 : _b.iframe.contentWindow) === null || _c === void 0 ? void 0 : _c.postMessage(event, getBaseUrl(this._config).origin);
      } catch (_d) {
      }
    };
    RampInstantSDK2.prototype._dispatchEvent = function(event) {
      var _a;
      var type = event.type;
      (_a = this._listeners[type]) === null || _a === void 0 ? void 0 : _a.forEach(function(handler) {
        return handler.callback(event);
      });
    };
    RampInstantSDK2.prototype._handleEscapeClick = function(event) {
      var escKeyCode = 27;
      if (event.key === "Escape" || event.key === "Esc" || event.keyCode === escKeyCode) {
        this._dispatchEvent({
          type: InternalEventTypes.WIDGET_CLOSE_REQUEST,
          payload: null,
          internal: true
        });
      }
    };
    RampInstantSDK2.prototype._onSendCrypto = function(event) {
      var _a;
      return __awaiter(this, void 0, void 0, function() {
        var result, e_2, errorMessage;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (event.eventVersion !== SEND_CRYPTO_SUPPORTED_VERSION) {
                console.warn("unsupported event version - '".concat(event, "'. This listener will have no effect."));
                return [
                  2
                  /*return*/
                ];
              }
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              return [4, (_a = this._onSendCryptoCallback) === null || _a === void 0 ? void 0 : _a.call(this, event.payload.assetInfo, event.payload.amount, event.payload.address)];
            case 2:
              result = _b.sent();
              if (!(result === null || result === void 0 ? void 0 : result.txHash)) {
                throw new Error("Missing txHash in the callback result");
              }
              return [3, 4];
            case 3:
              e_2 = _b.sent();
              errorMessage = void 0;
              if (typeof e_2 === "string") {
                errorMessage = e_2;
              } else if (e_2 instanceof Error) {
                errorMessage = e_2.message;
              }
              this._sendEventToWidget({
                eventVersion: SEND_CRYPTO_SUPPORTED_VERSION,
                type: InternalSdkEventTypes.SEND_CRYPTO_RESULT,
                payload: {
                  error: errorMessage
                }
              });
              return [
                2
                /*return*/
              ];
            case 4:
              this._sendEventToWidget({
                eventVersion: SEND_CRYPTO_SUPPORTED_VERSION,
                type: InternalSdkEventTypes.SEND_CRYPTO_RESULT,
                payload: {
                  txHash: result.txHash
                }
              });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    RampInstantSDK2.prototype._teardownEventSubscriptions = function() {
      this._removeEscapeHandler();
      window.removeEventListener("message", this._subscribeToWidgetEvents);
    };
    RampInstantSDK2.prototype._removeEscapeHandler = function() {
      window.removeEventListener("keydown", this._handleEscapeClick, true);
    };
    RampInstantSDK2.prototype._showUsingEmbeddedMode = function() {
      var _a, _b;
      var widgetUrl = initWidgetIframeUrl(this._config);
      this.domNodes = initDOMNodeWithoutOverlay(widgetUrl, this._dispatchEvent, this._config);
      if (!((_a = this.domNodes) === null || _a === void 0 ? void 0 : _a.body)) {
        throw new Error("Couldn't find <body> element.");
      }
      (_b = this._config.containerNode) === null || _b === void 0 ? void 0 : _b.appendChild(this.domNodes.shadowHost);
      this._isVisible = true;
    };
    RampInstantSDK2.prototype._showUsingOverlayMode = function() {
      var _a;
      var widgetUrl = initWidgetIframeUrl(this._config);
      this.domNodes = initDOMNodeWithOverlay(widgetUrl, this._dispatchEvent, this._config);
      if (!((_a = this.domNodes) === null || _a === void 0 ? void 0 : _a.body)) {
        throw new Error("Couldn't find <body> element.");
      }
      this.domNodes.body.appendChild(this.domNodes.shadowHost);
      this._isVisible = true;
      disableBodyScroll();
    };
    RampInstantSDK2.prototype._showUsingHostedMode = function() {
      var _a;
      var widgetUrl = initWidgetIframeUrl(this._config);
      this.widgetWindow = (_a = window.open(widgetUrl)) !== null && _a !== void 0 ? _a : void 0;
    };
    RampInstantSDK2.prototype._isConfiguredWithOverlay = function() {
      return ["desktop", "mobile"].includes(this._config.variant);
    };
    RampInstantSDK2.prototype._isConfiguredAsHosted = function() {
      return ["hosted-desktop", "hosted-mobile"].includes(this._config.variant);
    };
    RampInstantSDK2.prototype._isConfiguredAsEmbedded = function() {
      return ["embedded-desktop", "embedded-mobile"].includes(this._rawNormalizedConfig.variant);
    };
    RampInstantSDK2.prototype._getHostConfigSdkParams = function(config, useSendCryptoCallback) {
      var _a;
      var widgetVariant = determineWidgetVariant(config);
      var closeable = (_a = config.closeable) !== null && _a !== void 0 ? _a : ["desktop", "mobile"].includes(widgetVariant);
      return __assign({ sdkType: "WEB", sdkVersion: SDK_VERSION, variant: widgetVariant, widgetInstanceId: getRandomIntString(), closeable }, useSendCryptoCallback ? { useSendCryptoCallbackVersion: SEND_CRYPTO_SUPPORTED_VERSION } : {});
    };
    RampInstantSDK2.prototype._makeVisible = function() {
      var _a, _b;
      if (this._isConfiguredAsHosted()) {
        return;
      }
      (_a = this.domNodes) === null || _a === void 0 ? void 0 : _a.iframe.classList.add("visible");
      var loader = (_b = this.domNodes) === null || _b === void 0 ? void 0 : _b.shadow.querySelector(".loader-container");
      if (loader) {
        loader.remove();
      }
    };
    RampInstantSDK2.prototype._onConfigEvent = function() {
      this._makeVisible();
    };
    return RampInstantSDK2;
  }()
);
export {
  WidgetEventTypes as RampInstantEventTypes,
  RampInstantSDK
};
/*! Bundled license information:

@ramp-network/ramp-instant-sdk/dist/ramp-instant-sdk.es5.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=@ramp-network_ramp-instant-sdk.js.map
