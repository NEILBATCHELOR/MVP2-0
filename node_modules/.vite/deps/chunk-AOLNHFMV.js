import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  AccountController,
  ChainController,
  ConnectorController,
  ConstantsUtil,
  CoreHelperUtil,
  EventsController,
  RouterController,
  SnackController,
  StorageUtil
} from "./chunk-C5LFNDH4.js";
import {
  __toESM,
  init_globalPolyfills,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-F62UFKTJ.js";

// node_modules/.pnpm/@reown+appkit-controllers@1.7.8_@types+react@18.3.23_bufferutil@4.0.9_react@18.3.1_type_0f1a1f9d48748c0ee7867b93cb7784b4/node_modules/@reown/appkit-controllers/dist/esm/exports/utils.js
init_globalPolyfills();
var import_dist10 = __toESM(require_dist(), 1);
var import_dist11 = __toESM(require_dist2(), 1);
var import_dist12 = __toESM(require_dist3(), 1);

// node_modules/.pnpm/@reown+appkit-controllers@1.7.8_@types+react@18.3.23_bufferutil@4.0.9_react@18.3.1_type_0f1a1f9d48748c0ee7867b93cb7784b4/node_modules/@reown/appkit-controllers/dist/esm/src/utils/SocialsUtil.js
init_globalPolyfills();
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
function getPopupWindow() {
  try {
    return CoreHelperUtil.returnOpenHref(`${ConstantsUtil.SECURE_SITE_SDK_ORIGIN}/loading`, "popupWindow", "width=600,height=800,scrollbars=yes");
  } catch (error) {
    throw new Error("Could not open social popup");
  }
}
async function connectFarcaster() {
  RouterController.push("ConnectingFarcaster");
  const authConnector = ConnectorController.getAuthConnector();
  if (authConnector) {
    if (!AccountController.state.farcasterUrl) {
      try {
        const { url } = await authConnector.provider.getFarcasterUri();
        AccountController.setFarcasterUrl(url, ChainController.state.activeChain);
      } catch (error) {
        RouterController.goBack();
        SnackController.showError(error);
      }
    }
  }
}
async function connectSocial(socialProvider) {
  RouterController.push("ConnectingSocial");
  const authConnector = ConnectorController.getAuthConnector();
  let popupWindow = null;
  try {
    const timeout = setTimeout(() => {
      throw new Error("Social login timed out. Please try again.");
    }, 45e3);
    if (authConnector && socialProvider) {
      if (!CoreHelperUtil.isTelegram()) {
        popupWindow = getPopupWindow();
      }
      if (popupWindow) {
        AccountController.setSocialWindow(popupWindow, ChainController.state.activeChain);
      } else if (!CoreHelperUtil.isTelegram()) {
        throw new Error("Could not create social popup");
      }
      const { uri } = await authConnector.provider.getSocialRedirectUri({
        provider: socialProvider
      });
      if (!uri) {
        popupWindow?.close();
        throw new Error("Could not fetch the social redirect uri");
      }
      if (popupWindow) {
        popupWindow.location.href = uri;
      }
      if (CoreHelperUtil.isTelegram()) {
        StorageUtil.setTelegramSocialProvider(socialProvider);
        const parsedUri = CoreHelperUtil.formatTelegramSocialLoginUrl(uri);
        CoreHelperUtil.openHref(parsedUri, "_top");
      }
      clearTimeout(timeout);
    }
  } catch (error) {
    popupWindow?.close();
    SnackController.showError(error?.message);
  }
}
async function executeSocialLogin(socialProvider) {
  AccountController.setSocialProvider(socialProvider, ChainController.state.activeChain);
  EventsController.sendEvent({
    type: "track",
    event: "SOCIAL_LOGIN_STARTED",
    properties: { provider: socialProvider }
  });
  if (socialProvider === "farcaster") {
    await connectFarcaster();
  } else {
    await connectSocial(socialProvider);
  }
}

// node_modules/.pnpm/@reown+appkit-controllers@1.7.8_@types+react@18.3.23_bufferutil@4.0.9_react@18.3.1_type_0f1a1f9d48748c0ee7867b93cb7784b4/node_modules/@reown/appkit-controllers/dist/esm/src/utils/ChainControllerUtil.js
init_globalPolyfills();
var import_dist7 = __toESM(require_dist(), 1);
var import_dist8 = __toESM(require_dist2(), 1);
var import_dist9 = __toESM(require_dist3(), 1);

// node_modules/.pnpm/@reown+appkit-controllers@1.7.8_@types+react@18.3.23_bufferutil@4.0.9_react@18.3.1_type_0f1a1f9d48748c0ee7867b93cb7784b4/node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConnectorControllerUtil.js
init_globalPolyfills();
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);
function checkNamespaceConnectorId(namespace, connectorId) {
  return ConnectorController.getConnectorId(namespace) === connectorId;
}

// node_modules/.pnpm/@reown+appkit-controllers@1.7.8_@types+react@18.3.23_bufferutil@4.0.9_react@18.3.1_type_0f1a1f9d48748c0ee7867b93cb7784b4/node_modules/@reown/appkit-controllers/dist/esm/src/utils/ChainControllerUtil.js
function getChainsToDisconnect(namespace) {
  const namespaces = Array.from(ChainController.state.chains.keys());
  let chains = [];
  if (namespace) {
    chains.push([namespace, ChainController.state.chains.get(namespace)]);
    if (checkNamespaceConnectorId(namespace, ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT)) {
      namespaces.forEach((ns) => {
        if (ns !== namespace && checkNamespaceConnectorId(ns, ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT)) {
          chains.push([ns, ChainController.state.chains.get(ns)]);
        }
      });
    } else if (checkNamespaceConnectorId(namespace, ConstantsUtil.CONNECTOR_ID.AUTH)) {
      namespaces.forEach((ns) => {
        if (ns !== namespace && checkNamespaceConnectorId(ns, ConstantsUtil.CONNECTOR_ID.AUTH)) {
          chains.push([ns, ChainController.state.chains.get(ns)]);
        }
      });
    }
  } else {
    chains = Array.from(ChainController.state.chains.entries());
  }
  return chains;
}

export {
  executeSocialLogin,
  getChainsToDisconnect
};
//# sourceMappingURL=chunk-AOLNHFMV.js.map
